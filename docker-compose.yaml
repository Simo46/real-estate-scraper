services:
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${DB_DATABASE:-real_estate}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      # Ottimizzazioni perf per dev
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/databases/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5444}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${DB_DATABASE:-real_estate}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  mongodb:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-secret}
    volumes:
      - mongo_data:/data/db
    ports:
      - "${MONGO_PORT:-27018}:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6389}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Configurazione Redis ottimizzata per dev
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  ollama:
    build:
      context: ./services/ollama
      dockerfile: Dockerfile
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    environment:
      # Evita problemi DNS
      OLLAMA_HOST: 0.0.0.0
      # Model management
      OLLAMA_MODELS: ${OLLAMA_MODELS:-llama3.2:3b}
      OLLAMA_KEEP_ALIVE: ${OLLAMA_KEEP_ALIVE:-5m}
      OLLAMA_MAX_LOADED_MODELS: ${OLLAMA_MAX_LOADED_MODELS:-1}
      OLLAMA_NUM_PARALLEL: ${OLLAMA_NUM_PARALLEL:-1}
      OLLAMA_MAX_QUEUE: ${OLLAMA_MAX_QUEUE:-512}
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-8G}
        reservations:
          memory: ${OLLAMA_MEMORY_RESERVATION:-4G}
    # Fix DNS issues
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      # ===== DEVELOPMENT SETTINGS =====
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - PORT=${API_PORT:-3000}
      
      # ===== DATABASE CREDENTIALS =====
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-real_estate}
      - DB_USERNAME=${DB_USERNAME:-app_user}
      - DB_PASSWORD=${DB_PASSWORD:-app_password}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secret}
      
      # ===== AUTH & SECURITY =====
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-dev_refresh_secret}
      - JWT_PRE_AUTH_SECRET=${JWT_PRE_AUTH_SECRET:-dev_pre_auth_secret}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-15m}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - JWT_PRE_AUTH_EXPIRES_IN=${JWT_PRE_AUTH_EXPIRES_IN:-2m}
      
      # ===== EXTERNAL SERVICES =====
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT_INTERNAL:-6379}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT_INTERNAL:-6379}
      
      - MONGO_HOST=${MONGO_HOST:-mongodb}
      - MONGO_PORT=${MONGO_PORT_INTERNAL:-27017}
      - MONGO_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-secret}
      - MONGO_URL=mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-secret}@${MONGO_HOST:-mongodb}:${MONGO_PORT_INTERNAL:-27017}
      
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama}
      - OLLAMA_PORT=${OLLAMA_PORT_INTERNAL:-11434}
      - OLLAMA_URL=http://${OLLAMA_HOST:-ollama}:${OLLAMA_PORT_INTERNAL:-11434}
      
      # ===== NLP SERVICE INTEGRATION =====
      - NLP_SERVICE_HOST=${NLP_SERVICE_HOST:-nlp-service}
      - NLP_SERVICE_PORT=${NLP_SERVICE_PORT_INTERNAL:-8002}
      - NLP_SERVICE_URL=http://${NLP_SERVICE_HOST:-nlp-service}:${NLP_SERVICE_PORT_INTERNAL:-8002}
      
      # ===== FEATURE FLAGS =====
      - ENABLE_REGISTRATION=${ENABLE_REGISTRATION:-true}
      - ENABLE_EMAIL_VERIFICATION=${ENABLE_EMAIL_VERIFICATION:-false}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - ENABLE_SCRAPING=${ENABLE_SCRAPING:-true}
      - ENABLE_AI_PROCESSING=${ENABLE_AI_PROCESSING:-true}
      
      # ===== MONITORING =====
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      - DEBUG_SQL=${DEBUG_SQL:-false}
      
      # ===== LEGACY DATABASE_URL (backward compatibility) =====
      - DATABASE_URL=postgresql://${DB_USERNAME:-app_user}:${DB_PASSWORD:-app_password}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_DATABASE:-real_estate}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      ollama:
        condition: service_healthy
      nlp-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    volumes:
      # Hot reload per development
      - ./services/api-gateway:/app
      - /app/node_modules  # Prevents node_modules override
      # REMOVE: Non serve pi√π montare .env specifico
      # - ./services/api-gateway/.env:/app/.env:ro

  python-scraper:
    build:
      context: ./services/python-scraper
    ports:
      - "${PYTHON_SCRAPER_PORT:-8001}:8000"
    environment:
      # ===== DEVELOPMENT SETTINGS =====
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - PYTHON_ENV=${NODE_ENV:-development}
      
      # ===== DATABASE INTEGRATION =====
      - MONGO_HOST=${MONGO_HOST:-mongodb}
      - MONGO_PORT=${MONGO_PORT_INTERNAL:-27017}
      - MONGO_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-secret}
      - MONGO_URL=mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-secret}@${MONGO_HOST:-mongodb}:${MONGO_PORT_INTERNAL:-27017}
      
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT_INTERNAL:-6379}
      - REDIS_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT_INTERNAL:-6379}/0
      
      # ===== API INTEGRATION =====
      - API_GATEWAY_URL=http://api-gateway:3000
      - JWT_VERIFY_URL=http://api-gateway:3000/api/auth/verify
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-dev_refresh_secret}
      - JWT_PRE_AUTH_SECRET=${JWT_PRE_AUTH_SECRET:-dev_pre_auth_secret}
      
      # ===== SCRAPING CONFIGURATION =====
      - SCRAPER_MAX_CONCURRENT_JOBS=${SCRAPER_MAX_CONCURRENT_JOBS:-5}
      - SCRAPER_DEFAULT_DELAY=${SCRAPER_DEFAULT_DELAY:-1000}
      - SCRAPER_USER_AGENT_ROTATION=${SCRAPER_USER_AGENT_ROTATION:-true}
      - SCRAPER_RETRY_ATTEMPTS=${SCRAPER_RETRY_ATTEMPTS:-3}
      - SCRAPER_TIMEOUT=${PYTHON_SCRAPER_TIMEOUT:-300}
      - SCRAPER_WORKERS=${PYTHON_SCRAPER_WORKERS:-4}
      
      # ===== FEATURE FLAGS =====
      - ENABLE_SCRAPING=${ENABLE_SCRAPING:-true}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_TRACING=${ENABLE_TRACING:-false}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    volumes:
      # Hot reload per development
      - ./services/python-scraper:/app
      - /app/__pycache__  # Prevents Python cache override

  nlp-service:
    build:
      context: ./services/nlp-service
    ports:
      - "${NLP_SERVICE_PORT:-8002}:8002"
    environment:
      # ===== DEVELOPMENT SETTINGS =====
      - NLP_SERVICE_HOST=0.0.0.0
      - NLP_SERVICE_PORT=8002
      - NLP_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NLP_DEBUG=${NODE_ENV:-development}
      
      # ===== OLLAMA INTEGRATION =====
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_TIMEOUT=30
      - OLLAMA_RETRY_ATTEMPTS=3
      - OLLAMA_DEFAULT_MODEL=llama3.2:latest
      
      # ===== REDIS CACHING =====
      - NLP_REDIS_HOST=redis
      - NLP_REDIS_PORT=6379
      - NLP_REDIS_DB=1
      
      # ===== PERFORMANCE SETTINGS =====
      - NLP_MAX_QUERY_LENGTH=2000
      - NLP_MAX_CONCURRENT_REQUESTS=10
      - NLP_REQUEST_TIMEOUT=30
      
      # ===== SPACY MODELS =====
      - NLP_SPACY_MODEL_IT=it_core_news_sm
      - NLP_SPACY_MODEL_EN=en_core_web_sm
      
      # ===== ENTITY EXTRACTION SETTINGS =====
      - NLP_ENTITY_CONFIDENCE_THRESHOLD=0.5
      - NLP_ENTITY_NORMALIZATION=true
      - NLP_ENTITY_CUSTOM_PATTERNS=true
      - NLP_ENTITY_MAX_TEXT_LENGTH=5000
      
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    volumes:
      # Hot reload per development
      - ./services/nlp-service:/app
      - /app/__pycache__  # Prevents Python cache override

volumes:
  postgres_data:
    name: real_estate_postgres_data
  mongo_data:
    name: real_estate_mongo_data
  redis_data:
    name: real_estate_redis_data
  ollama_data:
    name: real_estate_ollama_data

networks:
  default:
    name: real_estate_network